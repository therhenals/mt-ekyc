{"file":"camera-preview.js","mappings":";;AAAA,MAAM,gBAAgB,GAAG,0FAA0F;;MCOtGA,eAAa;EAL1B;;;;;IAWE,SAAI,GAAG,OAAO,CAAC;GA6ChB;EAzCC,gBAAgB;IACd,IAAI,CAAC,IAAI,EAAE,CAAC;GACb;EAED,MAAM,IAAI;IACR,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC;MACvD,KAAK,EAAE;QACL,WAAW,EAAE,YAAY;QACzB,UAAU,EAAE,aAAa;OAC1B;KACF,CAAC,CAAC;IAEH,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC;IAE/B,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;GAC1B;EAED,SAAS;IACP,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IACtC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;IACxC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAErD,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;IAEnD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,WAAW,CAAC;IAE7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;GACnC;EAED,MAAM;IACJ,QACE,eACE,aAAO,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,MAAM,GAAG,EAAsB,CAAC,GAAU,EAElE,WAAK,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,EAAsB,CAAC,GAAI,EAEzD,cAAQ,OAAO,EAAE,MAAM,IAAI,CAAC,SAAS,EAAE,iBAAqB,CACxD,EACN;GACH;;;;;;;;;;;;;;;;;;;;;;","names":["CameraPreview"],"sources":["src/components/camera-preview/camera-preview.css?tag=camera-preview&encapsulation=shadow","src/components/camera-preview/camera-preview.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\nvideo {\n  width: 100%;\n  border-radius: 8px;\n}\n\nimg {\n  width: 100%;\n  border-radius: 8px;\n}\n","import { Component, h, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'camera-preview',\n  styleUrl: 'camera-preview.css',\n  shadow: true,\n})\nexport class CameraPreview {\n  camera: HTMLVideoElement;\n  photo: HTMLImageElement;\n\n  @Event() photoTaked: EventEmitter<string>;\n\n  test = 'hello';\n\n  videoDevices: MediaDeviceInfo[];\n\n  componentDidLoad() {\n    this.play();\n  }\n\n  async play() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        aspectRatio: 1.7777777778,\n        facingMode: 'environment',\n      },\n    });\n\n    this.camera.srcObject = stream;\n\n    await this.camera.play();\n  }\n\n  takePhoto() {\n    const canvas = document.createElement('canvas');\n    canvas.width = this.camera.videoWidth;\n    canvas.height = this.camera.videoHeight;\n    canvas.getContext('2d').drawImage(this.camera, 0, 0);\n\n    const base64Image = canvas.toDataURL('image/webp');\n\n    this.photo.src = base64Image;\n\n    this.photoTaked.emit(base64Image);\n  }\n\n  render() {\n    return (\n      <div>\n        <video ref={el => (this.camera = el as HTMLVideoElement)}></video>\n\n        <img ref={el => (this.photo = el as HTMLImageElement)} />\n\n        <button onClick={() => this.takePhoto()}>Take photo</button>\n      </div>\n    );\n  }\n}\n"],"version":3}