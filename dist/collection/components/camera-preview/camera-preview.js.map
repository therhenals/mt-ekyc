{"version":3,"file":"camera-preview.js","sourceRoot":"","sources":["../../../src/components/camera-preview/camera-preview.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'camera-preview',\n  styleUrl: 'camera-preview.css',\n  shadow: true,\n})\nexport class CameraPreview {\n  camera: HTMLVideoElement;\n  photo: HTMLImageElement;\n\n  @Event() photoTaked: EventEmitter<string>;\n\n  videoDevices: MediaDeviceInfo[];\n\n  componentDidLoad() {\n    this.play();\n  }\n\n  async play() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      video: {\n        width: {\n          min: 1280,\n          ideal: 1920,\n          max: 2560,\n        },\n        height: {\n          min: 720,\n          ideal: 1080,\n          max: 1440,\n        },\n        facingMode: 'environment',\n      },\n    });\n\n    this.camera.srcObject = stream;\n\n    await this.camera.play();\n  }\n\n  takePhoto() {\n    const canvas = document.createElement('canvas');\n\n    const resolutionMultiplier = 3;\n\n    canvas.width = this.camera.clientWidth * resolutionMultiplier;\n    canvas.height = this.camera.clientHeight * resolutionMultiplier;\n\n    const videoAspectRatio = this.camera.videoWidth / this.camera.videoHeight;\n    const canvasAspectRatio = canvas.width / canvas.height;\n\n    let sx: number, sy: number, sw: number, sh: number;\n\n    if (videoAspectRatio > canvasAspectRatio) {\n      // El video es más ancho, recorta en la alturas\n      sw = this.camera.videoHeight * canvasAspectRatio;\n      sh = this.camera.videoHeight;\n      sx = (this.camera.videoWidth - sw) / 2;\n      sy = 0;\n    } else {\n      // El video es más alto o tiene el mismo aspect ratio, recorta en la anchura\n      sw = this.camera.videoWidth;\n      sh = this.camera.videoWidth / canvasAspectRatio;\n      sx = 0;\n      sy = (this.camera.videoHeight - sh) / 2;\n    }\n\n    canvas.getContext(\"2d\").drawImage(this.camera, sx, sy, sw, sh, 0, 0, canvas.width, canvas.height);\n\n    // canvas.getContext('2d').drawImage(this.camera, 0, 0);\n\n    const base64Image = canvas.toDataURL('image/webp');\n\n    this.photo.src = base64Image;\n\n    this.photoTaked.emit(base64Image);\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"video-container\">\n          <video ref={el => (this.camera = el as HTMLVideoElement)}></video>\n        </div>\n\n        <img ref={el => (this.photo = el as HTMLImageElement)} />\n\n        <button onClick={() => this.takePhoto()}>Take photo</button>\n      </div>\n    );\n  }\n}\n"]}